{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAyCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAhDaQ,SAASC,cAAc,SAE/BC,iBAAiB,UAE7B,SAAuBC,GACrBA,EAAIC,iBAEJ,IAAgCC,EAAAF,EAAIG,cAA5BC,EAAwBF,EAAxBb,MAAOgB,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OACjBC,EAAiBC,OAAOJ,EAAMK,OAC9BC,EAAgBF,OAAOH,EAAKI,OAC5BE,EAAkBH,OAAOF,EAAOG,OAEpC,GAAIF,EAAiB,GAAKG,EAAgB,GAAKC,GAAmB,EAEhE,YADA1B,EAAA2B,OAAOC,KAAK,6BAId,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAiBG,GAAK,EAAG,CAE3C3B,EAAc2B,EAAI,EADAP,EAAiBO,EAAIJ,GAEpCK,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBJ,EAAA2B,OAAOK,QACL,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,MAC5C8B,E,IAGLC,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBJ,EAAA2B,OAAOS,QACL,sBAAqCH,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,MAC3C8B,E,IAORnB,EAAIG,cAAcmB,O,IAgBpB,IAAMH,EAAU,CACd/B,SAAU,YACVmC,QAAS,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formPromise = document.querySelector('.form');\n\nformPromise.addEventListener('submit', onFormPromise);\n\nfunction onFormPromise(evt) {\n  evt.preventDefault();\n\n  const { delay, step, amount } = evt.currentTarget;\n  let inputFormDelay = Number(delay.value);\n  let inputFormStep = Number(step.value);\n  let inputFormAmount = Number(amount.value);\n\n  if (inputFormDelay < 0 || inputFormStep < 0 || inputFormAmount <= 0) {\n    Notify.info('All data must be positive');\n    return;\n  }\n\n  for (let i = 0; i < inputFormAmount; i += 1) {\n    let customDelay = inputFormDelay + i * inputFormStep;\n    createPromise(i + 1, customDelay)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          options\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          options\n        );\n      });\n\n    // inputFormDelay += inputFormStep;\n  }\n\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst options = {\n  position: 'right-top',\n  timeout: 3000,\n};\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_currentTarget","currentTarget","delay1","step","amount","inputFormDelay","Number","value","inputFormStep","inputFormAmount","Notify","info","i","then","param","success","concat","$ce04d3a99e08e73b$var$options","catch","failure","reset","timeout"],"version":3,"file":"03-promises.61af5700.js.map"}