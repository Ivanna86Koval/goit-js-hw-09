{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,kBAASC,EAAcC,EAAUC,GACTC,KAAKC,Q,CAgD7B,SAASJ,EAAcC,EAAUC,GAC/B,OAAO,IAAIG,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBL,KAAKC,SAAW,GACtCK,YAAW,KACLD,EACFF,EAAQ,C,SAAEL,E,MAAUC,IAEpBK,EAAO,C,SAAEN,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAhDOQ,SAASC,cAAc,SAE/BC,iBAAiB,UAE7B,SAAuBC,GACrBA,EAAIC,iBAEJ,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAIK,cACpC,IAAIC,EAAiBC,OAAOL,EAAMM,OAC9BC,EAAgBF,OAAOJ,EAAKK,OAC5BE,EAAkBH,OAAOH,EAAOI,OAEpC,GAAIF,EAAiB,GAAKG,EAAgB,GAAKC,GAAmB,EAEhE,YADAzB,EAAA0B,OAAOC,KAAK,6BAId,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAiBG,GAAK,EAAG,CAE3C1B,EAAc0B,EAAI,EADAP,EAAiBO,EAAIJ,GAEpCK,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA0B,OAAOI,QACL,uBAAqB3B,QAAiBC,MAAW2B,EAC/C,IAGLC,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA0B,OAAOO,QACL,sBAAoB9B,QAAeC,MAAW2B,EAC9C,G,CAORhB,EAAIK,cAAcc,O,IAgBpB,MAAMH,EAAU,CACd5B,SAAU,YACVgC,QAAS","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formPromise = document.querySelector('.form');\n\nformPromise.addEventListener('submit', onFormPromise);\n\nfunction onFormPromise(evt) {\n  evt.preventDefault();\n\n  const { delay, step, amount } = evt.currentTarget;\n  let inputFormDelay = Number(delay.value);\n  let inputFormStep = Number(step.value);\n  let inputFormAmount = Number(amount.value);\n\n  if (inputFormDelay < 0 || inputFormStep < 0 || inputFormAmount <= 0) {\n    Notify.info('All data must be positive');\n    return;\n  }\n\n  for (let i = 0; i < inputFormAmount; i += 1) {\n    let customDelay = inputFormDelay + i * inputFormStep;\n    createPromise(i + 1, customDelay)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          options\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          options\n        );\n      });\n\n    // inputFormDelay += inputFormStep;\n  }\n\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst options = {\n  position: 'right-top',\n  timeout: 3000,\n};\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Math","random","Promise","resolve","reject","shouldResolve","setTimeout","document","querySelector","addEventListener","evt","preventDefault","delay1","step","amount","currentTarget","inputFormDelay","Number","value","inputFormStep","inputFormAmount","Notify","info","i","then","success","$47d4ff9957288465$var$options","catch","failure","reset","timeout"],"version":3,"file":"03-promises.21243c19.js.map"}