{"mappings":"YAAA,SAASA,EAAcC,EAAUC,GACTC,KAAKC,Q,CAO7BC,SAASC,KAAKC,MAAMC,gBAAkB,UACtC,IAAMC,EAAOJ,SAASK,cAAc,aAC9BC,EAAU,CACdV,SAAU,gBACVW,SAAU,OACVC,aAAc,OACdC,QAAS,IACTC,cAAc,EACdC,kBAAmB,cAKrB,SAAShB,EAAcC,EAAUC,GAC/B,OAAO,IAAIe,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBjB,KAAKC,SAAW,GACtCiB,YAAW,WACLD,EACFF,EAAQ,CAAEjB,WAAUC,UAEpBiB,EAAO,CAAElB,WAAUC,S,GAEpBA,E,IAXPO,EAAKa,iBAAiB,SAetB,SAAyBC,GACvBA,EAAEC,iBAMF,IALA,IAAgCC,EAAAF,EAAEG,cAAcC,SAAxCC,EAAwBH,EAAxBvB,MAAO2B,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEvBG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAGrCpC,EAAcoC,EAFdL,GAAcG,GAGXG,MAAK,SAAAC,G,IAAGrC,EAAQqC,EAARrC,SAAUC,EAAKoC,EAALpC,MACjBqC,OAAOC,QACL,uBAAwCC,OAAfxC,EAAS,QAAYwC,OAANvC,EAAM,MAC5CS,E,IAGL+B,OAAM,SAAAJ,G,IAAGrC,EAAQqC,EAARrC,SAAUC,EAAKoC,EAALpC,MAClBqC,OAAOI,QACL,sBAAqCF,OAAfxC,EAAS,QAAYwC,OAANvC,EAAM,MAC3CS,E,IAGNY,EAAEG,cAAckB,O","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\ndocument.body.style.backgroundColor = '#f7eff4';\nconst form = document.querySelector('form.form');\nconst options = {\n  position: 'center-bottom',\n  distance: '15px',\n  borderRadius: '15px',\n  timeout: 10000,\n  clickToClose: true,\n  cssAnimationStyle: 'from-right',\n};\n\nform.addEventListener('click', onPromiseCreate);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onPromiseCreate(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.currentTarget.elements;\n  let inputDelay = Number(delay.value);\n  let inputStep = Number(step.value);\n  let inputAmount = Number(amount.value);\n\n  for (let i = 1; i <= inputAmount; i += 1) {\n    inputDelay += inputStep;\n\n    createPromise(i, inputDelay)\n      .then(({ position, delay }) => {\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          options\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          options\n        );\n      });\n    e.currentTarget.reset();\n  }\n}\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","document","body","style","backgroundColor","$ce04d3a99e08e73b$var$form","querySelector","$ce04d3a99e08e73b$var$options","distance","borderRadius","timeout","clickToClose","cssAnimationStyle","Promise","resolve","reject","shouldResolve","setTimeout","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","inputDelay","Number","value","inputStep","inputAmount","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.8692bd2c.js.map"}